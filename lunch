#!/usr/bin/python
import json
import urllib2
import time
import sys
import re
from datetime import datetime
from datetime import timedelta

restaurants = {
	'b672efaf-032a-4bb8-d2a5-08d558129279': {'name': 'Linsen', 'nr_of_dishes': 2}, 
    '3d519481-1667-4cad-d2a3-08d558129279': {'name': 'Express', 'nr_of_dishes': 2}
}

foods = {"resturant": []}


def get_days_ahead(days_ahead):
    date = datetime.now() + timedelta(days=days_ahead)
    return date.strftime('%Y-%m-%d'), date.strftime('%A')

def parse_date(date_string):
    # date_string = '4/15/2019 12:00:00 AM'
    spliced = re.compile('/| ').split(date_string)
    return datetime(int(spliced[2]), int(spliced[0]), int(spliced[1]))
    

def get_food(start_date, end_date='', restaurant='3d519481-1667-4cad-d2a3-08d558129279'):
    res = json.loads(urllib2.urlopen(
        'http://carbonateapiprod.azurewebsites.net/api/v1/mealprovidingunits/' + 
        restaurant + '/dishoccurrences'
        '?startDate=' + start_date +
        '&endDate=' + end_date
    ).read())

    nDishes = restaurants[restaurant]['nr_of_dishes']
    restaurant_food = []
    while len(res) >= nDishes:
        len(res)
        myList = res[-2:]
        today = [
            parse_date(meat['startDate'].encode('utf-8')), 
            meat['displayNames'][0]['dishDisplayName'].encode('utf-8'), 
            veg['displayNames'][0]['dishDisplayName'].encode('utf-8')
        ]
        restaurant_food.append(today)
    return sorted(restaurant_food, key = lambda food: food[0])


def get_today():
    return get_days_ahead(0)

try:
    days_ago = int(sys.argv[1] if len(sys.argv) > 1 else 0)
    date, day = get_days_ahead(days_ago)
    today, _ = get_today()

except ValueError:
    print ValueError
    print 'invalid number of days'
except Exception as e:
    print e
    print 'shit fucked up'

for restaurant_id in restaurants.keys():
        all_food = get_food(today, date, restaurant_id)
        print all_food